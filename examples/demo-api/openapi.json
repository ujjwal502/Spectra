{
  "openapi": "3.0.0",
  "info": {
    "title": "Spectra Demo API",
    "description": "A lightweight REST API designed for demonstrating Spectra's comprehensive testing capabilities",
    "version": "1.0.0",
    "contact": {
      "name": "Spectra Demo Support",
      "email": "demo@spectra.dev"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8081",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/api/v1/users": {
      "get": {
        "summary": "Get all users",
        "description": "Retrieve a list of all users in the system",
        "operationId": "getAllUsers",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Create a new user in the system with validation",
        "operationId": "createUser",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or duplicate email"
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their ID",
        "operationId": "getUserById",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error (when ID is 999)"
          }
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Update an existing user's information",
        "operationId": "updateUser",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or duplicate email"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "Remove a user from the system",
        "operationId": "deleteUser",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/v1/users/department/{department}": {
      "get": {
        "summary": "Get users by department",
        "description": "Retrieve all users belonging to a specific department",
        "operationId": "getUsersByDepartment",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "department",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Department name"
          }
        ],
        "responses": {
          "200": {
            "description": "Users in department retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique user identifier"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "description": "User's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "age": {
            "type": "integer",
            "minimum": 18,
            "maximum": 100,
            "description": "User's age"
          },
          "department": {
            "type": "string",
            "description": "User's department"
          }
        },
        "required": ["id", "name", "email"]
      },
      "CreateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "description": "User's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "age": {
            "type": "integer",
            "minimum": 18,
            "maximum": 100,
            "description": "User's age"
          },
          "department": {
            "type": "string",
            "description": "User's department"
          }
        },
        "required": ["name", "email"]
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "description": "User's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "age": {
            "type": "integer",
            "minimum": 18,
            "maximum": 100,
            "description": "User's age"
          },
          "department": {
            "type": "string",
            "description": "User's department"
          }
        },
        "required": ["name", "email"]
      }
    }
  },
  "tags": [
    {
      "name": "Users",
      "description": "User management operations"
    }
  ]
}
